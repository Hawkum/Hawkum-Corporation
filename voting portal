<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Hawkum Corporation Voting</title>
    <style>
        body { font-family: Arial, sans-serif; text-align: center; }
        #logo { width: 2cm; height: 2cm; margin-bottom: 20px; }
    </style>
</head>
<body>
    <div id="loginPage">
        <h2>Login</h2>
        <input type="text" id="userID" placeholder="Enter your ID number" required>
        <button onclick="login()">Login</button>
    </div>

    <div id="adminPanel" style="display: none;">
        <h2>Admin Panel</h2>
        <p>Edit Voting Topics:</p>
        <input type="text" id="topic1" placeholder="Enter Topic 1">
        <input type="text" id="topic2" placeholder="Enter Topic 2">
        <input type="text" id="topic3" placeholder="Enter Topic 3">
        <input type="text" id="topic4" placeholder="Enter Topic 4">
        <input type="text" id="topic5" placeholder="Enter Topic 5">
        <p>Set Voting Options for Each Topic:</p>
        <textarea id="options1" placeholder="Enter options for Topic 1 (comma separated)"></textarea>
        <textarea id="options2" placeholder="Enter options for Topic 2 (comma separated)"></textarea>
        <textarea id="options3" placeholder="Enter options for Topic 3 (comma separated)"></textarea>
        <textarea id="options4" placeholder="Enter options for Topic 4 (comma separated)"></textarea>
        <textarea id="options5" placeholder="Enter options for Topic 5 (comma separated)"></textarea>
        <p>Set Voting Time:</p>
        <label>Start Time: <input type="datetime-local" id="votingStart"></label>
        <label>End Time: <input type="datetime-local" id="votingEnd"></label>
        <button onclick="updateTopics()">Save Changes</button>
    </div>

    <div id="voteHomePage" style="display: none;">
        <h2>Vote</h2>
        <p>Select a voting topic:</p>
        <div id="votingSections"></div>
        <h3>Live Results</h3>
        <div id="liveResults"></div>
        <button onclick="logout()">Log Out</button>
    </div>

    <script>
        const validIDs = ["2024001", "2024002", "2024003", "2024004", "2024005", "2024006", "2024007", "2024008", "2024009", "2024010", "2024011", "2024012", "2024013", "2024014", "2024015", "2025016"];
        const adminIDs = ["2024002", "2024004", "2024005", "2024007"];
        let currentUser = "";
        let votes = JSON.parse(localStorage.getItem("votes")) || { topic1: {}, topic2: {}, topic3: {}, topic4: {}, topic5: {} };
        let votedUsers = JSON.parse(localStorage.getItem("votedUsers")) || {};

        function login() {
            let userID = document.getElementById("userID").value;
            if (!validIDs.includes(userID)) {
                alert("Invalid ID number. Please try again.");
                return;
            }
            currentUser = userID;
            document.getElementById("loginPage").style.display = "none";
            document.getElementById("voteHomePage").style.display = "block";
            if (adminIDs.includes(userID)) {
                document.getElementById("adminPanel").style.display = "block";
            }
            displayVotingSections();
        }

        function updateTopics() {
            let topics = {};
            let options = {};

            for (let i = 1; i <= 5; i++) {
                topics["topic" + i] = document.getElementById("topic" + i).value || "Topic " + i;
                options["options" + i] = document.getElementById("options" + i).value.split(',').map(opt => opt.trim());
            }

            let votingStart = document.getElementById("votingStart").value;
            let votingEnd = document.getElementById("votingEnd").value;

            localStorage.setItem("topics", JSON.stringify(topics));
            localStorage.setItem("options", JSON.stringify(options));
            localStorage.setItem("votingStart", votingStart);
            localStorage.setItem("votingEnd", votingEnd);

            displayVotingSections();
            alert("Voting topics updated successfully!");
        }

        function displayVotingSections() {
            const topics = JSON.parse(localStorage.getItem("topics")) || {};
            const options = JSON.parse(localStorage.getItem("options")) || {};
            const storedVotes = JSON.parse(localStorage.getItem("votes")) || { topic1: {}, topic2: {}, topic3: {}, topic4: {}, topic5: {} };

            votes = storedVotes;
            const votingSections = document.getElementById("votingSections");
            const liveResults = document.getElementById("liveResults");

            votingSections.innerHTML = "";
            liveResults.innerHTML = "";

            for (let i = 1; i <= 5; i++) {
                let topic = topics["topic" + i] || "Topic " + i;
                let optionsList = options["options" + i] || [];

                let section = `<h3>${topic}</h3>`;
                optionsList.forEach(option => {
                    if (!votes["topic" + i][option]) votes["topic" + i][option] = 0;
                    section += `<button onclick="vote('topic${i}', '${option}')">${option}</button> `;
                });

                votingSections.innerHTML += section + "<br><br>";
                liveResults.innerHTML += `<p>${topic} Votes:</p>`;
                optionsList.forEach(option => {
                    liveResults.innerHTML += `<p>${option}: <span id="result_topic${i}_${option.replace(/\s/g, '_')}">${votes["topic" + i][option]}</span></p>`;
                });
            }

            localStorage.setItem("votes", JSON.stringify(votes));
        }

        function checkVotingTime() {
            const startTime = new Date(localStorage.getItem("votingStart"));
            const endTime = new Date(localStorage.getItem("votingEnd"));
            const currentTime = new Date();

            if (!startTime || !endTime || isNaN(startTime) || isNaN(endTime)) {
                alert("Voting time not set. Contact the admin.");
                return false;
            }

            if (currentTime < startTime) {
                alert("Voting has not started yet.");
                return false;
            }

            if (currentTime > endTime) {
                alert("Voting has ended.");
                return false;
            }

            return true;
        }

        function vote(topic, option) {
            if (!checkVotingTime()) {
                return;
            }

            if (votedUsers[currentUser]?.includes(topic)) {
                alert("You have already voted for this topic.");
                return;
            }

            votes[topic][option]++;
            votedUsers[currentUser] = [...(votedUsers[currentUser] || []), topic];

            document.getElementById("result_" + topic + "_" + option.replace(/\s/g, '_')).innerText = votes[topic][option];

            localStorage.setItem("votes", JSON.stringify(votes));
            localStorage.setItem("votedUsers", JSON.stringify(votedUsers));

            alert("Vote cast successfully for " + option);
        }

        function logout() {
            alert("Logging out...");
            location.reload();
        }

        window.onload = function() {
            displayVotingSections();
        };
    </script>
</body>
</html>
